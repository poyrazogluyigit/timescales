#!/usr/bin/env python3.11

import sys
from util.parse import get_parser
from util.generator import Generator
from serialization.json import encode_json
from serialization.flatbuf import Flatbuffers
import zenoh
from zenoh.value import Encoding
from time import sleep

# import timescales



def main():

    parser = get_parser()

    args = parser.parse_args()

    assert(args.duration > 1)
    assert(0 <= args.lbound <= args.ubound)
    assert(0 <= args.min_recur <= args.max_recur)
    assert(args.condense == -1 or args.condense == 0 or
           args.condense == 1 or args.condense >= 2)
    assert(not(args.format == 'csv' and args.condense == 1))
    assert(args.interval > 0)

    interval = args.interval

    generator_args = [args.property, args.lbound, args.ubound, args.min_recur, args.max_recur]

    timestamps = Generator.generate(*generator_args)

        # init zenoh connection
    try:
        session = zenoh.open()
        key = 'timescales'
        pub = session.declare_publisher(key)
    except:
        print("An error occurred with zenoh.")
        exit

    previous = dict()
    for i in timestamps:
        print(i)
        if args.format == "string":
            message = f"{i}"
        # encoding
        elif args.format == "flatbuf":
            message = Flatbuffers.encode_flatbuf(i[0], True, args.persistent, previous)
        elif args.format == "json":
            # message = encode_json(i[0])
            pass
        print(message)
        pub.put(message, encoding=Encoding.APP_OCTET_STREAM())
        sleep(interval)

    pub.undeclare()



    # past_spec, future_spec, rows = timescales.generate(
    #     property=args.property,
    #     lower_bound=args.lbound,
    #     upper_bound=args.ubound,
    #     min_recur=args.min_recur,
    #     max_recur=args.max_recur,
    #     limit_stutter=args.condense,
    #     duration=args.duration,
    #     failing_end=args.failing_end
    # )
# 
    # if args.future:
    #     timescales.write_spec(
    #         future_spec, filename=args.name, directory=args.output_dir)
    # else:
    #     timescales.write_spec(past_spec, filename=args.name,
    #                           directory=args.output_dir)
# 
    # if args.format == 'csv':
    #     timescales.write_csv_trace(
    #         rows, filename=args.name, directory=args.output_dir)
    # elif args.format == 'json':
    #     timescales.write_json_trace(rows, filename=args.name,
    #                                 directory=args.output_dir,
    #                                 persistent=args.persistent)
    # elif args.format == 'protobuf':
    #     timescales.write_protobuf_trace(rows, filename=args.name,
    #                                     directory=args.output_dir,
    #                                     persistent=args.persistent)
    # elif args.format == 'flatbuf':
    #     timescales.write_flatbuffers_trace(rows, filename=args.name,
    #                                        directory=args.output_dir,
    #                                        persistent=args.persistent)
    # else:
    #     raise ValueError(
    #         "Unknown output format. Please see the help for supported output formats.")


if __name__ == '__main__':
    main()
